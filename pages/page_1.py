import streamlit as st
import pandas as pd
import plotly.express as px

import geopandas as gpd
from shapely import wkt
import folium

st.title("Pr√©sentation du projet")

# ------------------------------
# Fonctions
# ------------------------------

def chargement_isochrone(df):

    try:
        chargement_isochrone.counter += 1
    except AttributeError:
        chargement_isochrone.counter = 1

    transport_map = {
        0: "driving-car",
        1: "cycling-electric",
        2: "cycling-regular",
    }
    transport_map_bouton = {
        0: "üöó Voiture",
        1: "üîãV√©lo √©lectrique ",
        2: "üö≤ V√©lo",
    }

    selection_transport = st.segmented_control(
        "Type de transport",
        options=transport_map_bouton.keys(),
        format_func=lambda option: transport_map_bouton[option],
        selection_mode="single",
        key=chargement_isochrone.counter,
        default=0,
    )

    transport = transport_map[selection_transport]

    #Chargement des donn√©es
    df['geometry'] = df['geometry'].apply(wkt.loads)
    gdf = gpd.GeoDataFrame(df, crs='epsg:4326')
    gdf = gdf[gdf["transport"]==transport]
    gdf = gdf[["minutes", "geometry"]]

    return gdf


# ------------------------------
# Sidebar
# ------------------------------

# st.sidebar.write("Accueil")


# ------------------------------
# Paragraphe
# ------------------------------

markdown_text = (
"""
L'objectif de ce site est de comparer les temps de trajet en voiture ou en v√©lo 
(avec assistance √©lectrique ou non) lors des trajets du quotidien 
(par exemple, pour faire des courses) sur l'ensemble de la population
r√©sidant en France m√©tropolitaine.

Pour cela, je souhaitais savoir quel pourcetange de la population habite
√† 5, 10, 15, 20, 25 et 30 minutes d'un supermarch√© ou d'une boulangerie,
selon le mode de d√©placement choisi : voiure, v√©lo et v√©lo √©lectrique.

Pour construire cette base de donn√©es, il faut d'abord calculer des isochrones.
Une isochrone permet de d√©terminer quelle zone g√©ographique est atteignable 
en un temps donn√© selon un mode de d√©placement.

Ci-dessous, vous pouvez voir un exemple avec les isochrones de 5 √† 30 minutes
pour chaque mode de transport, pour le m√™me supermarch√© :
"""
)
st.write(markdown_text)


# ------------------------------
# Visualisation isochrone
# ------------------------------

df = pd.read_csv("processed/data/exemple_visualisation_1.csv", engine="python")
gdf = chargement_isochrone(df)

geo_point = gdf.loc[gdf["minutes"] == 0, "geometry"]
x, y = float(geo_point.y.iloc[0]), float(geo_point.x.iloc[0])
pad = 0.1
sw, ne = [x - pad, y - pad], [x + pad, y + pad]

carte = gdf.explore(column="minutes", 
                marker_type="marker",
                style_kwds={"fillOpacity":0.15}, 
                legend_kwds={"max_labels":6}
                )
carte.fit_bounds([sw, ne])
st.components.v1.html(folium.Figure().add_child(carte).render(), height=600, width=800)

# ------------------------------
# Paragraphe
# ------------------------------

markdown_text = (
"""
On constate que la voiture permet au supermarch√© d'atteindre une client√®le sur une zone
beaucoup plus large qu'avec le v√©lo. Mais les supermarch√©s sont pr√©sents partout sur le territoire :
nous allons donc r√©p√©ter ce processus pour chaque supermarch√© en France m√©tropolitaine, 
et fusionner les isochrones. On obtient une carte isochrone pour chaque mode de transport 
et chaque intervalle de temps.

En recoupant les cartes isochrones obtenues avec la carte de la r√©partition 
de la population, on d'obtient le pourcentage de la population √©tant √† 
5/10/15/20/25/30 minutes d'au moins un supermarch√© selon le type de transport.

Ci-dessous, vous pouvez voir un exemple avec les cartes isochrones pour les supermarch√©s
dans le Calvados :
"""
)
st.write(markdown_text)

# ------------------------------
# Visualisation isochrone
# ------------------------------

df = pd.read_csv("processed/data/exemple_visualisation_2.csv", engine="python")
gdf = chargement_isochrone(df)

carte = gdf.explore(column="minutes", 
                marker_type="marker",
                style_kwds={"fillOpacity":0.15}, 
                legend_kwds={"max_labels":5}
                )
st.components.v1.html(folium.Figure().add_child(carte).render(), height=600, width=800)

# ------------------------------
# Paragraphe
# ------------------------------

markdown_text = (
"""
Enfin, on recoupe une nouvelle fois les cartes isochrones et les cartes de la r√©partition
de la population avec la carte des communes.
Cela nous permet d'avoir des r√©sultats par commune, et de mieux comprendre la diff√©rence
des temps de trajet en voiture et √† v√©lo selon la taille de la commune.

Le m√™me processus est r√©p√©t√© pour les boulangeries. Vous pouvez explorer les donn√©es
en allant dans la barre lat√©rale et en allant sur la page R√©sultats.

#### Base de donn√©es et applications open source utilis√©es

Les isochrones ont √©t√© calcul√©s gr√¢ce √† une instance locale 
d'[OpenRouteService](https://openrouteservice.org/).

La liste des commerces en France m√©tropolitaine est issue de la base de donn√©es 
d'[OpenStreetMap via Opendatasoft](https://public.opendatasoft.com/explore/dataset/osm-france-shop-craft-office/information/).

La r√©partition de la population sur le territoire fran√ßais est issue du jeu de donn√©es 
[GHSL "Gloval Human Settlement Layer"](https://human-settlement.emergency.copernicus.eu/dataToolsOverview.php).

La base de donn√©es comportant les coordonn√©es des communes provient de
l'[ADEME](https://data-interne.ademe.fr/datasets/geo-contours-communes).

"""
)

st.write(markdown_text)